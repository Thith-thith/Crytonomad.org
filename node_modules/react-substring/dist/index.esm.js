import _extends from '@babel/runtime/helpers/esm/extends';
import _inheritsLoose from '@babel/runtime/helpers/esm/inheritsLoose';
import React from 'react';
import escapeRegExp from 'lodash.escaperegexp';
import PropTypes from 'prop-types';

var Substring =
/*#__PURE__*/
function (_React$PureComponent) {
  _inheritsLoose(Substring, _React$PureComponent);

  function Substring() {
    return _React$PureComponent.apply(this, arguments) || this;
  }

  var _proto = Substring.prototype;

  _proto.processContent = function processContent(content, substrings) {
    var contentParts = [content];
    var key = 0;
    substrings.forEach(function (_ref) {
      var match = _ref.match,
          Component = _ref.component,
          caseSensitive = _ref.caseSensitive,
          props = _ref.props;
      props = props || {};
      Component = Component || 'mark';

      if (!Array.isArray(match)) {
        match = [match];
      }

      match.forEach(function (matchItem) {
        if (!matchItem) {
          return;
        }

        var midResult = [];
        contentParts.forEach(function (contentPart) {
          //Work only with string - another ones are React elements
          if (typeof contentPart === 'string') {
            if (typeof matchItem === 'string') {
              var modificators = 'g';

              if (caseSensitive !== true) {
                modificators += 'i';
              }

              matchItem = new RegExp(escapeRegExp(matchItem), modificators);
            }

            var matchResult;
            var startIndex = 0;
            var lastIndex = 0;
            var prevFrom;

            while (matchResult = matchItem.exec(contentPart)) {
              var from = matchResult.index;

              if (prevFrom === undefined) {
                prevFrom = from;
              } else {
                if (prevFrom === from) {
                  break;
                } else {
                  prevFrom = from;
                }
              }

              var to = matchItem.lastIndex || from + matchResult[0].length;
              var beforeString = contentPart.slice(startIndex, from);

              if (beforeString) {
                midResult.push(beforeString);
              }

              var matchSubstring = contentPart.slice(from, to);
              startIndex = to;
              lastIndex = to;
              midResult.push(React.createElement(Component, _extends({
                key: key++
              }, props), matchSubstring));
            }

            var afterString = contentPart.slice(lastIndex);

            if (afterString) {
              midResult.push(afterString);
            }
          } else {
            midResult.push(contentPart);
          }
        });
        contentParts = midResult;
      });
    });
    return contentParts;
  };

  _proto.render = function render() {
    var _this$props = this.props,
        content = _this$props.children,
        substrings = _this$props.substrings,
        className = _this$props.className,
        style = _this$props.style,
        ResultComponent = _this$props.outerTagName;
    return React.createElement(ResultComponent, {
      className: className,
      style: style
    }, this.processContent(content, substrings));
  };

  return Substring;
}(React.PureComponent);

Substring.propTypes = {
  /**  Main content as string */
  children: PropTypes.string,

  /**  Array on Substring objects */
  substrings:
  /*#__PURE__*/
  PropTypes.arrayOf(
  /*#__PURE__*/
  PropTypes.shape({
    /** Pattern to search substrings for processing */
    match:
    /*#__PURE__*/
    PropTypes.oneOfType([
    /*#__PURE__*/
    PropTypes.instanceOf(RegExp), PropTypes.string,
    /*#__PURE__*/
    PropTypes.arrayOf(
    /*#__PURE__*/
    PropTypes.oneOfType([
    /*#__PURE__*/
    PropTypes.instanceOf(RegExp), PropTypes.string]))]).isRequired,

    /** React component or tag name taking matching content. (Default tag `mark`) */
    component:
    /*#__PURE__*/
    PropTypes.oneOfType([PropTypes.string, PropTypes.func]),

    /** If use match as string - it allows to switch on case sensitive search substring (Default: `false`) */
    caseSensitive: PropTypes.bool,

    /** Additional props for matching component (can use `style`, `className` or something else) */
    props: PropTypes.object
  })).isRequired,

  /** Tag name passed to document.createElement to create the outer container element. */
  outerTagName: PropTypes.string,

  /** Optional inline style to attach to outermost element. */
  style: PropTypes.object,

  /** Optional CSS class to attach to outermost element. */
  className: PropTypes.object
};
Substring.defaultProps = {
  outerTagName: 'span'
};

export default Substring;
//# sourceMappingURL=index.esm.js.map
